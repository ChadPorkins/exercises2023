---
title: "Lecture 11 Exercises"
format:
  html: 
    theme: literal
editor_options: 
  markdown: 
    wrap: 72
---

## Question 1

In this exercise, you will combine everything that you've learned so
far.

Do you remember Daniel from the first class with the GIS and
ecology companies? Every company has a website that he manages (a very
hardworking guy). Let's help him write code that will give him a summary
of views on each web page.

Here are pre-defined two vectors: GIS and Ecology, They are the number
of views on each site on the last day.

```{r}
GIS = 30
Ecology = 19
```

### 1. Follow the instructions below.

1.  If both GIS and Ecology are 30 or higher, set Views equal to double
    the sum of GIS and Ecology.

2.  If both GIS and Ecology are strictly below 20, set Views equal to
    half the sum of GIS and Ecology.

3.  In all other cases, set Views equal to GIS and Ecology.

4.  Finally, print the resulting Views variable.

------------------------------------------------------------------------

A small reminder of what the syntax looks like:

if (condition1) {

expr1

} else if (condition2) {

expr2

} else if (condition3) {

expr3

} else {

expr4

}


## Answer 1

```{r}
GIS = 30
Ecology = 19


if (GIS >= 30 & Ecology >= 30) {
  Views <- 2 * (GIS + Ecology)
} else if (GIS < 20& Ecology < 20) {
  Views <- 0.5 * (GIS + Ecology)
} else {
  Views <- GIS + Ecology
}


Views
```

## Question 2

### 2. Follow the instructions below.

A for loop is used to iterate over a vector in R programming.

```{r}
q = 1
```


1.  Create a new loop that multiplies the value of q by 4 each time, as
    long as q is less than 16, after each multiplication the next q
    should increase by 1.

2.  The loop is stopped with a brake argument if the multiplication by 4
    of q is divisible by 8, but still, print out the result before the
    breaking.

------------------------------------------------------------------------

A small reminder of what the syntax looks like:

while (condition) {

expr

}

## Answer 2

```{r}
# Initialize i as 1 
q = 1

# Code the while loop
while (q <= 16) {
  print(q * 4)
  if (q %% 8 == 0) {
    break
  }
  q = q + 1
}
```


## Question 3

Who doesn't like to play tic tac toe? Here is a matrix of a tic tac toe
game between students during an important lecture.

```{r}
x = c("O","NA","X")
y = c("NA","X","O")
z = c("X","O","O")

m = matrix(c(x, y, z), ncol = 3)
m
```

### 3. Follow the instructions below.

1.  By using a pair of for loops print the values in the tic tac toe
    matrix. Inside the inner loop, make use of `print(`) and `paste()`
    to print out information in the following format: "On row x and
    column y the board contains z", where x is the value on that
    position.

------------------------------------------------------------------------

A small reminder of what the syntax looks like:

for (var1 in seq1) {

for (var2 in seq2) {

    expr

}

}

You should get something like that:

\[1\] "On row 1 and column 1 the board contains O"

\[1\] "On row 1 and column 2 the board contains NA"

\[1\] "On row 1 and column 3 the board contains X"

\[1\] "On row 2 and column 1 the board contains NA"

\[1\] "On row 2 and column 2 the board contains X"

\[1\] "On row 2 and column 3 the board contains O"

\[1\] "On row 3 and column 1 the board contains X"

\[1\] "On row 3 and column 2 the board contains O"

\[1\] "On row 3 and column 3 the board contains O"


## Answer 3

```{r}

x = c("O","NA","X")
y = c("NA","X","O")
z = c("X","O","O")

m = matrix(c(x, y, z), ncol = 3)

for (x in 1:nrow(m)) {
  for (y in 1:ncol(m)) {
    print(paste("On row", x, "and column", y, "the board contains", m[x,y]))
  }
}
```



## Question 4

### 4. Follow the instructions below.

1.  Create a function to calculate the area of a circle. Test the
    function by finding the area of a circle with a diameter of 3.4 cm.

2.  Can you use it on a vector of data?

3.  Make the default diameter of the function to be 1 cm.

## Answer 4

```{r, eval=FALSE}
# area of a circle
# the equation to calculate the area of a circle is pi * radius^2

circle.area = function(d=1){ 
    pi * (d/2)^2
}

# to use your new function

circle.area(10)
# [1] 78.53982

# to test on a vector of diameters
# first create a vector with diameters ranging from 0 to 50 in steps of 10

cir.diam = seq(from = 0, to = 50, by = 10)

# test your function

circle.area(cir.diam)
# [1]    0.00000   78.53982  314.15927  706.85835 1256.63706 1963.49541
```

## Lecture 11 Homework


## Question 1

R disposes of the `apply()` function family, which consists of iterative
functions that aim at minimizing your need to explicitly create loops.

`lapply()` applies a function to every element of a list.

The output returned is also list (explaining the "l" in lapply) and has
the same number of elements as the object passed to it.

Run the code following code:

```{r}
SimulatedData = list(SimpleSequence = 1:4, Norm10 = rnorm(10),
    Norm20 = rnorm(20, 1), Norm100 = rnorm(100, 5))

```

### 1.1 Follow the instructions below.

1.  Lapply mean to each element of the list

2.  Lapply min to each element of the list

3.  Lapply max to each element of the list

4.  Lapply shapiro.test to each element of the list

The syntax is: `lapply(list, function)`

------------------------------------------------------------------------

`sapply()` is a 'wrapper' function for `lapply()`, but returns a
simplified output as a vector, instead of a list.

### 1.2 Follow the instructions below.

1.  Sapply mean to each element of the list

2.  Sapply min to each element of the list

3.  Sapply max to each element of the list

4.  Sapply shapiro.test to each element of the list

The syntax is: `mapply(list, function)`



# Asnwer 1.1

```{r}
SimulatedData = list(SimpleSequence = 1:4, Norm10 = rnorm(10),
    Norm20 = rnorm(20, 1), Norm100 = rnorm(100, 5))

```


```{r}
#Lapply mean to each element of the list

lapply(SimulatedData,mean)

#Lapply min to each element of the list

lapply(SimulatedData,min)


#Lapply max to each element of the list

lapply(SimulatedData,max)

#Lapply shapiro.test to each element of the list

lapply(SimulatedData,shapiro.test)

```

# Asnwer 1.2



```{r}
#Sapply mean to each element of the list

sapply(SimulatedData,mean)

#Sapply min to each element of the list

sapply(SimulatedData,min)


#Sapply max to each element of the list

sapply(SimulatedData,max)

#Sapply shapiro.test to each element of the list

sapply(SimulatedData,shapiro.test)

```

## Question 2

### 2. Follow the instructions below.

1.  Write a function to convert farenheit to centegrade (oC = (oF - 32)
    x 5/9).

2.  Get your function to print out your result in the following format:
    "Farenheit : value of oF is equivalent to value oC centigrade."

You should get something like that:

\[1\] "Fahrenheit: 50 oF is equivalent to" \[1\] "Centigrade: 10 oC"

## Answer 2

Write a function to convert farenheit to centegrade (oC = (oF - 32) x
5/9). Get your function to print out your result in the following
format: "Farenheit : value of oF is equivalent to value oC centigrade."


```{r}
far.cent <- function(a) {
    val <- (a - 32) * 5/9
    print(paste("Fahrenheit: ", round(a, digits = 3), "oF", "is equivalent to", sep = " "))  
    print(paste("Centigrade: ", round(val, digits = 3), "oC", sep = " "))  
}

```

## Bonus question! That is for those who want to go further beyond!

`mapply(`) works as a multivariate version of `sapply()`.

It will apply a given function to the first element of each argument
first, followed by the second element, and so on.

```{r}

lilySeeds = c(80, 65, 89, 23, 21)
poppySeeds = c(20, 35, 11, 77, 79)

```

1.  Mapply the sum of the two vectors.

2.  Mapply the min of the two vectors.

3.  Mapply the max of the two vectors.

------------------------------------------------------------------------

`tapply()` is used to apply a function over subsets of a vector.

It is primarily used when the dataset contains dataset contains
different groups (i.e. levels/factors) and we want to apply a function
to each of these groups.

1.  Get the mean hp by cylinder groups form the mtcars data-set.

------------------------------------------------------------------------

The following question will be about the [Ricker
model](https://en.wikipedia.org/wiki/Ricker_model).

The Ricker model is defined as: Where Nt is the population size at time t, r is the population growth rate and K is the carrying capacity. Write a function to simulate this model so you can conveniently determine the effect of changing r and the initial population size N0. K is often set to 100 by default, but you want the option of being able to change this with your function. So, you will need a function with the following arguments; nzero which sets the initial population size, r which will determine the population growth rate, time which sets how long the simulation will run for and K which we will initially set to 100 by default.

#Bonus answer

```{r}

lilySeeds = c(80, 65, 89, 23, 21)
poppySeeds = c(20, 35, 11, 77, 79)

#Mapply the sum of the two vectors.

mapply(sum, lilySeeds, poppySeeds)

#Mapply the min of the two vectors.

mapply(min, lilySeeds, poppySeeds)

#Mapply the max of the two vectors.

mapply(max, lilySeeds, poppySeeds)

```

___

```{r}
#get the mean hp by cylinder groups form the mtcars data-set.

tapply(mtcars$hp, mtcars$cyl, FUN = mean)

```

___

```{r}
# function to simulate Ricker model

Ricker.model <- function(nzero, r, time, K = 1) {
    # sets initial parameters
    N <- numeric(time + 1)  # creates a real vector of length time+1 to store values of Nt+1
    N[1] <- nzero  # sets initial population size in first element of N
    for (i in 1:time) {
        # loops over time
        N[i + 1] <- N[i] * exp(r * (1 - N[i]/K))
    }
    Time <- 0:time  # creates vector for x axis
    plot(Time, N, type = "o", xlim = c(0, time), xlab = "Time", ylab = "Population size (N)", main = paste("r =", r,
        sep = " "))  # plots     output
}

# To run play around with the different parameters, especially r
Ricker.model(nzero = 0.1, r = 1, time = 100)
```



