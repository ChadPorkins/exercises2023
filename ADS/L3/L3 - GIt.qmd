---
title: "Lecture 3 Exercises"
format:
  html: 
    theme: literal
editor_options: 
  markdown: 
    wrap: 72
---

A version control system is a tool that manages changes made to the
files and directories in a project. Many version control systems exist;
this lesson focuses on one called Git, which is used by many of the data
science tools covered in our other lessons. Its strengths are:

Nothing that is saved to Git is ever lost, so you can always go back to
see which results were generated by which versions of your programs.

Git automatically notifies you when your work conflicts with someone
else's, so it's harder (but not impossible) to accidentally overwrite
work.

Git can synchronize work done by different people on different machines,
so it scales as your team does.

## Before we start!

Download git!

Create a [github](https://github.com/) account!

Open Shell / Bash and tell Git who you are. Configure the user name and
email address to be used with your commits.

Use the following code:

(Use the same user name and email you used in the registration of your
GitHub account!)

git config --global user.name "Sam Smith" git config --global user.email
sam\@example.com

## Question 1

### 1. Initialization

1.  In your home directory create a new directory called l3git.

2.  In the new directory create two new files - data.txt and info.csv.

3.  Create a new local repository within l3git.

## Answer 1

```{r, eval=FALSE}
cd ~

mkdir l3git

cd ~/l3git

touch data.txt

touch info.csv

git init
    
```

## Question 2

### 2. Index

1.  Add your name to the data.txt file.

2.  Add data.txt to the index stage.

3.  Use git status, what do you get?

4.  Unstage data.txt.

## Answer 2

```{r,eval=FALSE}
git add data.txt

We can see in green all the files that are indexed. and are ready to be committed. In red we see all the untracked files that we didn't index yet. 

git rm --cached data.txt

```

## Question 3

### 3. Modification

1.  Add all the files in the directory to the index stage.

2.  Check if it worked with git status.

3.  Add your birthday date to the info.csv file.

4.  Use git status again, did something change?

5.  Again, Add all the files in the directory to the index stage.

6.  Make your first commit, and add a "V1" message.

## Answer 3

```{r, eval=FALSE}

git add *

We can see that all of our files are green are indexed.

After we added our birthday date to the info.csv, The file is no longer green but red because of the modification that we did in the indexed file.

git add *
  
git commit -m "v1"
  
```

## Question 4

When sharing your code with others, there are often files or parts of
your project, you do not want to share. For example:

-   Log files.

-   Temporary files.

-   Hidden files.

-   Personal files.

For this git can specify which files or parts of your project should be
ignored by using a .gitignore file.

### 4 .gitignore

1.  Create a .gitignore file to ignore log.txt files.

2.  Create a log.txt file and try to index it.

3.  Add your full name to the info.csv file.

4.  Index the necessary files, make your second commit, and add a "V2"
    message.

## Answer 4

```{r,eval=FALSE}

touch .gitignore

git add *
  
The following paths are ignored by one of your .gitignore files:
log.txt
hint: Use -f if you really want to add them.
hint: Turn this message off by running
hint: "git config advice.addIgnoredFile false"

We can see that the log.txt file cant be indexed due to the .gitignore file.

Add your full name to the info.csv file.

git add *

git commit -m "v2"


```

## Question 5

A branch in Git is similar to the branch of a tree. Analogically, a tree
branch is attached to the central part of the tree called the trunk.
While branches can generate and fall off, the trunk remains compact and
is the only part by which we can say the tree is alive and standing.
Similarly, a branch in Git is a way to keep developing and coding a new
feature or modification to the software and still not affecting the main
part of the project. We can also say that branches create another line
of development in the project. The primary or default branch in Git is
the master branch (similar to the trunk of the tree). As soon as the
repository creates, so does the main branch (or the default branch).

### 5. Git branch.

1.  Create a new branch with your name.

2.  Using `git checkout` change to your new branch.

3.  Create two new files - Cute_dogs.html and Cute_cats.html.

4.  Add your city of birth to the info.csv file.

5.  Index and commit the new changes in the directory, with a "V3"
    message.

6.  Switch back to the master branch, did something change?

7.  Merge the branch you created to the main branch.

## Asnwer 5

```{r, eval=FALSE}
git branch goku

git checkout goku

touch Cute_dogs.html

touch Cute_cats.html

Add your city of birth to the info.csv file.

git add *

git commit -m "v3"

git checkout main

The HTML files you created are missing! buy why?

The HTML files are located at a different branch, so we can't see them nor the change that we did in the info.csv file.

git merge goku
```

## Question 6

Remote repositories are versions of your project that are hosted on the
Internet or network somewhere. You can have several of them, each of
which generally is either read-only or read/written for you.

### 6.1 Remote repositories - Push

1.  Create a new GitHub repository called "Yourname_l3".

2.  Connect the repository to your git directory.

```{r,eval=FALSE}

git branch -M main

git remote add origin https://github.com/Your_user/Yourname_l3

git push -u origin main
```

### 6.2 Remote repositories - Pull

git clone is primarily used to point to an existing repo and make a
clone or copy of that repository in a new directory, at another
location. The original repository can be located on the local filesystem
or on remote machine-accessible supported protocols. The git clone
command copies an existing Git repository.

1.  Create a new directory under your home directory, and call it
    l3copy.

2.  Copy to the new directory the files from your GitHub repository.

## Answer 6.2

```{r,eval=FALSE}

cd ~ 

mkdir l3copy

cd ~/l3copy

git clone https://github.com/Your_user/Yourname_l3

```

## Question 7

### 7. Data Recovery

Theoretically let's say we created a fatal bug in Info.csv. But thanks
to the knowledge we gained in this lesson, the situation is not lost,
and we can save the file.

1.  Restore the info.csv to its original version - V1.

## Answer 7 

```{r,eval=FALSE}
git log 

(You will get a commit code for each commit that you have done)


git checkout (v1 - commmit code) -- info.csv
```
