---
title: "Lecture 4 Exercises"
format:
  html: 
    theme: literal
---

## Question 1

`plot()` is the main graphing function in R. it automatically produces simple plots for vectors, functions or data frames.

As part of our research on functions and mathematics at university, we want to visualize functions.

-   Plot the following vectors in R. try to think what the x and y axis represents.

```{r}
x <- seq(0,8*pi,length.out=100)
y <- sin(x)
```

you should get something like this:

```{r, echo = FALSE}
plot(x,y)

```

------------------------------------------------------------------------

Another useful argument is changing the type of the plot

-   using the `plot()` function, add the **type** argument for the following criteria,and **write down** what changed in the plot.

1.  type = "p"

2.  type = "l"

3.  type = "b"

4.  type = "c"

5.  type = "o"

6.  type = "s"

7.  type = "n"

------------------------------------------------------------------------

There are many ways to change the plot we created in R and to change it to our needs!

-   using the `plot()` function, add the **pch** argument between 1 and 25, In addition use the **rainbow color** argument with 5 unique colors.

-   Save the plot to a pdf file, name it "fancy1"

you should get something like this:

```{r, echo = FALSE}
fancy1 = plot(x,y, pch = 1:25, col=rainbow(5))

fancy1

```

## Question 2

Now we want to create a summary boxplot, using both speed and distance columns from the built-in data set **cars**.

-   Use boxplot to plot the varriable speed, what can you learn from this boxplot?

-   Use boxplot to compare the column speed and dist from the built-in data set cars. (To plot these we use the boxplot command with a slightly different syntax `boxplot(y ~ x)`.)

-   Add to this plot the title "Car Speed Against Stopping Distance" with font number 3

-   Give the axis Their proper names

-   The boxplot should be in red

-   Create the same plots with **violin plots**, Which one do you prefer more?

## Question 3

As part of our research we would like to create complex graphs according to certain indicators (factors). We will return to the data file of the whales.

-   Read the data file again as "whale".

-   Create a plot of the number of whales in relation to the depth, the plot should be categorized by the noise level.

-   Give suitable names to axes and give each category a different color.

-   An example of this can be seen in the presentation on slides 72-73


    You should get something like that:

```{r, echo = FALSE}
whale = read.csv("whaledata.csv")
```

```{r,echo = FALSE}
par(mar = c(4.0, 4.0, 4.0, 1.9), xaxs="i", yaxs="i")
plot(whale$number.whales, whale$depth,
       type = "n",
       xlab = "Nnumber of whales",
       ylab = expression(paste("Depth (m) ")),
       xlim = c(0, 30), ylim = c(0, 1700), bty = "l",
       las = 1, cex.axis = 0.8, tcl = -0.2)
points(x = whale$number.whales[whale$water.noise == "low"],
       y = whale$depth[whale$water.noise == "low"],
       pch = 16, col = "green")
points(x = whale$number.whales[whale$water.noise == "medium"],
       y = whale$depth[whale$water.noise == "medium"],
       pch = 16, col = "orange")
points(x = whale$number.whales[whale$water.noise == "high"],
       y = whale$depth[whale$water.noise == "high"],
       pch = 16, col = "red")
text(x = 28, y = 1600, label = "A", cex = 2)
leg_cols <- c("green", "orange", "red")
leg_sym <- c(16, 16, 16)
leg_lab <- c("low", "medium", "high")

legend(x = 25, y = 800, col = leg_cols, pch = leg_sym, 
        legend = leg_lab, bty = "n", 
        title = "Noise level")
```
